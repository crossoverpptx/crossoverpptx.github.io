<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Centos7.6下corosync+pacemaker+pcs高可用集群环境安装</title>
    <url>/2020/12/28/Centos7-6%E4%B8%8Bcorosync-pacemaker-pcs%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>在容灾备份领域，有多种高可用方案，corosync+pacemaker无疑是开源方案中的佼佼者。</p>
<h2 id="什么是corosync、pacemaker、pcs？"><a href="#什么是corosync、pacemaker、pcs？" class="headerlink" title="什么是corosync、pacemaker、pcs？"></a>什么是corosync、pacemaker、pcs？</h2><blockquote>
<ul>
<li>Corosync是集群管理套件的一部分，通常会与其他资源管理器一起组合，使用它在传递信息的时候可以通过一个简单的配置文件来定义信息传递的方式和协议等。它是一个新兴的软件，2008年推出，但其实它并不是一个真正意义上的新软件，在2002年的时候有一个项目Openais，它由于过大，分裂为两个子项目，其中可以实现HA心跳信息传输的功能就是Corosync ，它的代码60%左右来源于Openais。Corosync可以提供一个完整的HA功能，但是要实现更多，更复杂的功能，那就需要使用Openais了。Corosync是未来的发展方向，在以后的新项目里，一般采用Corosync，而hb_gui可以提供很好的HA管理功能，可以实现图形化的管理。另外相关的图形化有RHCS的套件luci+ricci，当然还有基于java开发的LCMC集群管理工具。</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>Pacemaker是一个集群资源管理器。它利用集群基础构件（OpenAIS、heartbeat或corosync）提供的消息和成员管理能力来探测并从节点或资源级别的故障中恢复，以实现群集服务（亦称资源）的最大可用性。</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>Pcs是一种常用的集群配置及管理指令集，其他类似命令有crmsh。</li>
</ul>
</blockquote>
<hr>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a><strong>环境准备</strong></h2><p>1、保证两个节点上的/etc/hosts文件均添加了下面的内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">10.10</span><span class="number">.4</span><span class="number">.176</span> g0001210030<span class="number">-00</span>-server01</span><br><span class="line"><span class="number">10.10</span><span class="number">.4</span><span class="number">.177</span> g0001210030<span class="number">-00</span>-server02</span><br></pre></td></tr></table></figure>

<p>2、关闭防火墙（每个节点都需执行）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">setenforce <span class="number">0</span></span><br><span class="line">sed -i.bak <span class="string">"s/SELINUX=enforcing/SELINUX=permissive/g"</span> /etc/selinux/config</span><br><span class="line">systemctl disable firewalld.service</span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line">iptables --flush</span><br></pre></td></tr></table></figure>

<p>3、查看主备机是否安装ntp服务</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">systemctl status ntpd.service</span><br></pre></td></tr></table></figure>

<p><img src="/2020/12/28/Centos7-6%E4%B8%8Bcorosync-pacemaker-pcs%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/pic1.png" alt></p>
<p>若未安装ntp服务，先安装，确认安装ntp服务后，主机执行以下命令</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cp /etc/ntp.conf /etc/ntp.conf.bak</span><br><span class="line">rm -f /etc/ntp.conf</span><br><span class="line">vi /etc/ntp.conf</span><br></pre></td></tr></table></figure>

<p>在/etc/ntp.conf文件输入一下内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">restrict default kod nomodify notrap nopeer noquery</span><br><span class="line">restrict <span class="number">-6</span> default kod nomodify notrap nopper noquery</span><br><span class="line">restrict <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">restrict <span class="number">-6</span>::<span class="number">1</span></span><br><span class="line">restrict <span class="number">10.10</span><span class="number">.1</span><span class="number">.0</span> mask <span class="number">255.255</span><span class="number">.0</span><span class="number">.0</span> nomodify notrap</span><br><span class="line">server <span class="number">10.10</span><span class="number">.4</span><span class="number">.176</span></span><br><span class="line">server <span class="number">127.127</span><span class="number">.1</span><span class="number">.0</span></span><br><span class="line">fudge <span class="number">127.127</span><span class="number">.1</span><span class="number">.0</span> stratum <span class="number">10</span></span><br></pre></td></tr></table></figure>

<p>启动主机ntp服务</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#systemctl start ntpd.service</span></span><br></pre></td></tr></table></figure>

<p>备机执行以下命令</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ntpdate <span class="number">10.10</span><span class="number">.4</span><span class="number">.176</span></span><br></pre></td></tr></table></figure>

<p>如果出现下面提示</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">21</span> Sep <span class="number">18</span>:<span class="number">01</span>:<span class="number">41</span> ntpdate[<span class="number">2604</span>]: no server suitable <span class="keyword">for</span> synchronization found</span><br></pre></td></tr></table></figure>
<p>稍等片刻再执行一次</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ntpdate <span class="number">10.10</span><span class="number">.4</span><span class="number">.176</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="安装集群软件"><a href="#安装集群软件" class="headerlink" title="安装集群软件"></a><strong>安装集群软件</strong></h2><p><img src="/2020/12/28/Centos7-6%E4%B8%8Bcorosync-pacemaker-pcs%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/pic2.png" alt></p>
<p><img src="/2020/12/28/Centos7-6%E4%B8%8Bcorosync-pacemaker-pcs%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/pic3.png" alt></p>
<p>安装完毕，输入pcs status查询集群状态为下图所示，表示集群安装成功</p>
<p><img src="/2020/12/28/Centos7-6%E4%B8%8Bcorosync-pacemaker-pcs%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/pic4.png" alt></p>
<hr>
<h2 id="集群资源配置"><a href="#集群资源配置" class="headerlink" title="集群资源配置"></a><strong>集群资源配置</strong></h2><p>1、注意：配置集群资源时，为防止资源启动的节点不一致，需要暂时将备节点的集群服务停止。在任意节点输入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pcs cluster stop G0001210030<span class="number">-00</span>-SERVER02</span><br></pre></td></tr></table></figure>
<p>即可关闭备节点集群服务。</p>
<p>2、配置浮动IP和ha服务高可用（ip需根据实际情况修改、在任意节点配置即可）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pcs resource create vip ocf:heartbeat:IPaddr2 ip=<span class="number">192.168</span><span class="number">.8</span><span class="number">.53</span> cidr_netmask=<span class="number">16</span> op monitor interval=<span class="number">30</span>s</span><br><span class="line">pcs resource create ha systemd:ha op monitor interval=<span class="number">60</span>s timeout=<span class="number">60</span>s on-fail=restart</span><br></pre></td></tr></table></figure>

<p>配置资源关系</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pcs constraint colocation add vip ha INFINITY</span><br></pre></td></tr></table></figure>

<p>设置启动顺序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pcs constraint order vip  then ha</span><br></pre></td></tr></table></figure>

<p>3、配置其他资源，如mariadb数据库服务（在任意节点配置即可，需要注意的是：配置mariadb服务高可用需要将mariadb服务设置为开机不自启）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pcs resource create mysql-s systemd:mariadb op monitor interval=<span class="number">60</span>s timeout=<span class="number">60</span>s on-fail=restart</span><br></pre></td></tr></table></figure>

<p>配置资源关系</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pcs constraint colocation add ha mysql-s INFINITY</span><br></pre></td></tr></table></figure>

<p>设置启动顺序</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pcs constraint order ha then mysql-s</span><br></pre></td></tr></table></figure>



<p><strong>至此整个搭建过程完毕。</strong></p>
]]></content>
      <categories>
        <category>高可用</category>
      </categories>
      <tags>
        <tag>pcs</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7.x系统中Docker安装及简单使用</title>
    <url>/2020/12/30/Centos7-x%E7%B3%BB%E7%BB%9F%E4%B8%ADDocker%E5%AE%89%E8%A3%85%E5%8F%8A%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h3><pre><code>1、只能是64位的系统;
2、要求centos7以上系统的内核版本不低于3.10。</code></pre><hr>
<h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><p>1、移除旧版本的docker</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-selinux docker-engine-selinux docker-engine</span><br></pre></td></tr></table></figure>

<p>2、安装依赖包</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure>

<p>3、添加yum软件源<br>非官方源(比如阿里云)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>

<p>官方源</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">yum-config-manager  --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>

<p>4、更新yum软件源缓存：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure>

<p>5、安装docker</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">yum  -y install  docker-ce</span><br></pre></td></tr></table></figure>

<p>安装时，如果报错出现rpm包无法找到，先手动通过wget下载该rpm包，然后重新执行安装命令即可。 </p>
<hr>
<h3 id="Docker镜像和容器的简单使用命令"><a href="#Docker镜像和容器的简单使用命令" class="headerlink" title="Docker镜像和容器的简单使用命令"></a>Docker镜像和容器的简单使用命令</h3><p>1、查看docker版本： docker  version<br>2、查询镜像： docker  search  imageName[镜像名称：如  centos]<br>3、获取镜像：docker  pull  imageName[镜像名称：如  centos]<br>4、列出镜像:  docker  image  ls<br>5、查询镜像体积：docker system df<br>6、删除镜像:docker  image rm  imagesID<br>7、启动容器： docker  run –name ***  -p  port:port  -d  [镜像名]/ docker start                        [containerID/containerName]<br>8、退出容器：exit/docker  stop containerID<br>9、进入容器：docker  attach  containerID/docker   exec  -it   containerID<br>10、删除容器：<br>1）删除处于终止状态的：docker  container  rm  [ID]<br>2）删除处于运行状态的：docker  container  rm  -f  [ID]<br>3）删除所有处于终止状态的：docker container prune </p>
<hr>
<h3 id="Docker安装Tomcat实例"><a href="#Docker安装Tomcat实例" class="headerlink" title="Docker安装Tomcat实例"></a>Docker安装Tomcat实例</h3><p>1、获取tomcat镜像: docker  pull  tomcat<br>2、新建并运行tomcat容器:</p>
<p>docker run  –name  tomcat  -p 127.0.0.1:8080:8080    -d  tomcat<br>docker run  –name  tomcat  -p 127.0.0.1:8080:8080    -d  tomcat –restart=always<br>    –name：容器名<br>    -p：后面接IP地址(可以不设)：接宿主机端口：容器端口<br>    -d：后台运行<br>3、进入容器：docker   exec/attach  -it  tomcat  bash<br>    exec进入容器后使用exit命令退出容器，只会退出容器，让容器在后台继续运行；attach进入后用exit退出，     会直接关闭容器.<br>    -it:交互模式进入容器<br>4、退出tomcat容器：exit<br>5、停止tomcat容器：docker   stop   tomcat<br>6、启动tomcat容器：docker   start   tomcat<br>7、删除tomcat容器：docker   container    rm  -f  tomcat</p>
]]></content>
      <categories>
        <category>容器</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>EXSi上修改虚拟机磁盘扇区大小为32的简易方法</title>
    <url>/2020/12/31/EXSi%E4%B8%8A%E4%BF%AE%E6%94%B9%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%A3%81%E7%9B%98%E6%89%87%E5%8C%BA%E5%A4%A7%E5%B0%8F%E4%B8%BA32%E7%9A%84%E7%AE%80%E6%98%93%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>1、登陆EXSi，进入虚拟机所在的datastore目录,每个目录为一个虚拟机</p>
<p><img src="/2020/12/31/EXSi%E4%B8%8A%E4%BF%AE%E6%94%B9%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%A3%81%E7%9B%98%E6%89%87%E5%8C%BA%E5%A4%A7%E5%B0%8F%E4%B8%BA32%E7%9A%84%E7%AE%80%E6%98%93%E6%96%B9%E6%B3%95/3.png" alt></p>
<p><img src="/2020/12/31/EXSi%E4%B8%8A%E4%BF%AE%E6%94%B9%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%A3%81%E7%9B%98%E6%89%87%E5%8C%BA%E5%A4%A7%E5%B0%8F%E4%B8%BA32%E7%9A%84%E7%AE%80%E6%98%93%E6%96%B9%E6%B3%95/4.png" alt></p>
<p>2、找到对应的vmdk文件</p>
<p><img src="/2020/12/31/EXSi%E4%B8%8A%E4%BF%AE%E6%94%B9%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%A3%81%E7%9B%98%E6%89%87%E5%8C%BA%E5%A4%A7%E5%B0%8F%E4%B8%BA32%E7%9A%84%E7%AE%80%E6%98%93%E6%96%B9%E6%B3%95/5.png" alt></p>
<p>3、进入修改</p>
<p><img src="/2020/12/31/EXSi%E4%B8%8A%E4%BF%AE%E6%94%B9%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%A3%81%E7%9B%98%E6%89%87%E5%8C%BA%E5%A4%A7%E5%B0%8F%E4%B8%BA32%E7%9A%84%E7%AE%80%E6%98%93%E6%96%B9%E6%B3%95/6.png" alt></p>
<p><img src="/2020/12/31/EXSi%E4%B8%8A%E4%BF%AE%E6%94%B9%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%A3%81%E7%9B%98%E6%89%87%E5%8C%BA%E5%A4%A7%E5%B0%8F%E4%B8%BA32%E7%9A%84%E7%AE%80%E6%98%93%E6%96%B9%E6%B3%95/7.png" alt></p>
<p>4、保存退出即可</p>
<hr>
<h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>1、ESXI上创建所需安装版本的虚拟机，暂不安装系统</p>
<p>2、将虚拟机的vmdk文件下载到本地进行以下修改</p>
<p><img src="/2020/12/31/EXSi%E4%B8%8A%E4%BF%AE%E6%94%B9%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%A3%81%E7%9B%98%E6%89%87%E5%8C%BA%E5%A4%A7%E5%B0%8F%E4%B8%BA32%E7%9A%84%E7%AE%80%E6%98%93%E6%96%B9%E6%B3%95/8.png" alt></p>
<p>3、将修改后的vmdk文件上传到ESXi后开始系统安装</p>
<p>4、安装完成后使用winhex工具查看磁盘扇区数是否为32扇区</p>
]]></content>
      <categories>
        <category>虚拟化</category>
      </categories>
      <tags>
        <tag>EXSi</tag>
      </tags>
  </entry>
  <entry>
    <title>KVM之virsh管理命令</title>
    <url>/2021/01/03/KVM%E4%B9%8Bvirsh%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="使用前提"><a href="#使用前提" class="headerlink" title="使用前提"></a>使用前提</h2><ol>
<li>安装虚拟化相关组件<br>安装qemu-kvm（用户态管理工具）<br>安装libvirt（命令行管理工具）<br>安装virt-install（安装kvm工具）<br>安装bridge-utils（桥接设备管理工具）<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">yum install -y qemu-kvm libvirt virt-install bridge-utils</span><br></pre></td></tr></table></figure></li>
<li>启动libvirtd服务<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">systemctl enable libvirtd</span><br><span class="line">systemctl start  libvirtd</span><br><span class="line">systemctl status  libvirtd</span><br></pre></td></tr></table></figure></li>
<li>安装virt-manager<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">yum -y install virt-manager</span><br></pre></td></tr></table></figure>

</li>
</ol>
<p>使用可视化创建的虚拟机xml文件位置：/etc/libvirt/qemu/</p>
<hr>
<h2 id="常用的虚拟机管理命令"><a href="#常用的虚拟机管理命令" class="headerlink" title="常用的虚拟机管理命令"></a>常用的虚拟机管理命令</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出所有的虚拟机</span></span><br><span class="line">virsh list --all</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示虚拟机信息</span></span><br><span class="line">virsh dominfo *	( *为虚拟机名称 )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义虚拟机</span></span><br><span class="line">virsh define *.xml</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动虚拟机</span></span><br><span class="line">virsh start *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制关闭虚拟机/关闭虚拟机</span></span><br><span class="line">virsh destroy */virsh shutdown *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除虚拟机</span></span><br><span class="line">virsh undefine *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 挂起虚拟机</span></span><br><span class="line">virsh suspend *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复被挂起的虚拟机</span></span><br><span class="line">virsh resume *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看虚拟机网卡信息</span></span><br><span class="line">virsh domiflist *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加网卡</span></span><br><span class="line">virsh attach-interface * --type * --source * --model * --live --config</span><br><span class="line">（第一个*为虚拟机名称，后三个*依次为Type Source Model）</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除网卡</span></span><br><span class="line">virsh detach-interface * --type  * --mac  *  --live --config</span><br><span class="line">（第一个*为虚拟机名称，后两个*依次为Type MAC）</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="通过xml文件创建虚拟机"><a href="#通过xml文件创建虚拟机" class="headerlink" title="通过xml文件创建虚拟机"></a>通过xml文件创建虚拟机</h2><ol>
<li>配置xml，创建空镜像<br>xml文件配置可通过可视化创建虚拟机作为模板。<br>创建空镜像<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">qemu-img create -f qcow2  *.qcow2  <span class="number">100</span>G	（*为虚拟机名称，大小自定义）</span><br></pre></td></tr></table></figure></li>
<li>定义虚拟机，启动虚拟机<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">virsh define *.xml</span><br><span class="line">virsh start  *</span><br></pre></td></tr></table></figure>

</li>
</ol>
<hr>
<h2 id="通过存储池iSCSI创建虚拟机"><a href="#通过存储池iSCSI创建虚拟机" class="headerlink" title="通过存储池iSCSI创建虚拟机"></a>通过存储池iSCSI创建虚拟机</h2><ol>
<li>定义存储池<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">virsh pool-define-<span class="keyword">as</span> --name unary --type iscsi --source-host <span class="number">10.10</span><span class="number">.4</span><span class="number">.75</span> --source-dev iqn<span class="number">.2020</span><span class="number">-01.</span>com.unary:<span class="number">208450552</span>df3636922c9fbb0b0c71f45.d41d8cd98f00b204e9800998ecf8427e.v<span class="number">.4</span>a2a26d3.st<span class="number">.20200102193701</span> --target /dev/disk/by-path</span><br></pre></td></tr></table></figure></li>
<li>创建存储池<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">virsh pool-build unary</span><br></pre></td></tr></table></figure></li>
<li>激活存储池<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">virsh pool-start unary</span><br></pre></td></tr></table></figure></li>
<li>查看存储池<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">virsh pool-list –all</span><br></pre></td></tr></table></figure></li>
<li>配置xml文件</li>
<li>创建空镜像</li>
<li>定义虚拟机，启动虚拟机</li>
</ol>
]]></content>
      <categories>
        <category>虚拟化</category>
      </categories>
      <tags>
        <tag>virsh</tag>
      </tags>
  </entry>
  <entry>
    <title>《假如猫从世界上消失了》</title>
    <url>/2020/07/14/%E3%80%8A%E5%81%87%E5%A6%82%E7%8C%AB%E4%BB%8E%E4%B8%96%E7%95%8C%E4%B8%8A%E6%B6%88%E5%A4%B1%E4%BA%86%E3%80%8B/</url>
    <content><![CDATA[<p>假如猫从世界上消失了<br>那这个世界会有如何的变化呢<br>假如我从世界上消失了<br>那究竟会有谁为我悲伤呢<br>假如我从世界上消失了<br>那些未实现的梦想和思绪<br>那些在我存活时未能完成的事情<br>对此我一定会抱有许多遗憾吧<br>然而，这个世界我在与不在<br>相信一定会有所不同<br>也许真的只是些小小的不同<br>然而正是它们<br>是我存在过的证明<br>是我挣扎着，烦恼着，生活过的证明</p>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>感悟</tag>
      </tags>
  </entry>
  <entry>
    <title>KVM</title>
    <url>/2021/01/02/KVM/</url>
    <content><![CDATA[<h2 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h2><ol>
<li><p>Kernel-based Virtual Machine的简称，是一个开源的系统虚拟化模块，自Linux2.6.20之后集成在Linux的各个主要发行版本中。它使用Linux自身的调度器进行管理，所以相对于Xen，其核心源码很少。KVM目前已成为学术界的主流VMM之一。</p>
</li>
<li><p>Kvm的安装，需要一定的硬件和软件支持：<br>1.需要宿主机CPU支持完全虚拟化（如Intel VT技术或者AMD V技术）。<br>2.宿主机系统为64位的Linux系统且内核版本高于2.6.20，内核版本过低，需要进行升级。 </p>
</li>
<li><p>查看CPU是否支持完全虚拟化，在宿主机输入：</p>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">egrep <span class="string">'vmx|svm'</span> /proc/cpuinfo</span><br><span class="line">...</span><br><span class="line">flags  : fpu vme de pse tsc msr pae mce cx8 apic mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good xtopology nonstop_tsc aperfmperf pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm dca sse4_1 sse4_2 popcnt aes lahf_lm ida arat dts tpr_shadow vnmi flexpriority ept vpid</span><br></pre></td></tr></table></figure>
<p>​       回车后，出现以上结果，说明CPU支持虚拟化且已经开启。Vmx是intel cpu，svm为AMD cpu。另外在选择宿主机系统的时候，尽量不要使用Centos6.3和6.4版本，经验证，这两个版本安装kvm后，会出现图像界面闪烁情况，推荐使用Centos6.564bit。对于宿主机的配置，官方建议为64位x86架构且支持虚拟化指令集的CPU，4G内存，以便发挥kvm最大性能。</p>
<hr>
<h2 id="KVM安装"><a href="#KVM安装" class="headerlink" title="KVM安装"></a>KVM安装</h2><ol>
<li>关闭selinux<br>设置selinux=disable。</li>
<li>使用yum安装命令进行安装相关软件包</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">yum install kvm qemu-kvm virt-viewer virt-manager libvirt libvirt-python python-virtinst bridge-utils tunctl</span><br></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>kvm是属于内核模块；</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>qemu-kvm是kvm的一个管理工具的引擎；</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>libvirt和libvirt-client提供访问和控制虚拟客户端的接口；</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>python-virtinst中有很多用于安装虚拟机的程序，如virt-install，virt-clone等；</li>
</ul>
</blockquote>
<blockquote>
<ul>
<li>bridge-utils是一个和网桥有关的程序。</li>
</ul>
</blockquote>
<ol start="3">
<li>安装完毕后，Reboot机器。</li>
</ol>
<hr>
<h2 id="KVM启用"><a href="#KVM启用" class="headerlink" title="KVM启用"></a>KVM启用</h2><ol>
<li><p>查看虚拟机安装情况，安装正常会出现如下情况</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lsmod | grep kvm  </span><br><span class="line">kvm_intel    <span class="number">69416</span>  <span class="number">0</span></span><br><span class="line">kvm           <span class="number">226208</span>  <span class="number">1</span> kvm_amd</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动 libvirtd </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">service libvirtd start</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看虚拟机状态命令</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">virsh  list   --all</span><br><span class="line">Id    Name                    status</span><br><span class="line">----------------------------------------------------</span><br></pre></td></tr></table></figure>
<p>这样就表明kvm安装成功且已经能正常工作了。</p>
</li>
</ol>
<hr>
<h2 id="虚拟机安装和设置"><a href="#虚拟机安装和设置" class="headerlink" title="虚拟机安装和设置"></a>虚拟机安装和设置</h2><ol>
<li>virt-manager图形工具<br>安装kvm成功后，会在system tools中有一个virtual machine manager。</li>
</ol>
<p><img src="/2021/01/02/KVM/1.png" alt></p>
<p>​        Kvm虚拟机的安装维护，主要通过此工具。</p>
<ol start="2">
<li>新建kvm虚拟机<br>virtual machine manager 在首次登陆后，会自动创建一个本地的kvm连接。</li>
</ol>
<p><img src="/2021/01/02/KVM/2.png" alt></p>
<p>右击选择“new”即可新建虚拟机。</p>
<ol start="3">
<li>源文件选择<br>Kvm的源文件安装方式有四种，我们主要熟知第一种和第四种。</li>
</ol>
<p><img src="/2021/01/02/KVM/3.png" alt></p>
<p>​        第一种为选择本地的镜像文件安装，第四种为选择从其他虚拟机（vmware）迁移过来的虚拟机文件，选择后点击“Forward”。</p>
<ol start="4">
<li><p>选择源文件路径OS type 和Version可以默认，选择路径后点击“Forward”。</p>
<p><img src="/2021/01/02/KVM/4.png" alt></p>
</li>
<li><p>Cpu和内存设置</p>
<p>设置虚拟机内存大小和cpu个数，选择后点击“Forword”。</p>
</li>
</ol>
<p><img src="/2021/01/02/KVM/5.png" alt></p>
<ol start="6">
<li><p>设置和网络<br>勾选“customize……install”，这样在点击Finish后，我们可以再具体配置虚拟机的其他选项。<br>Advancde options 下可以设置虚拟机的网络连接类型和MAC地址。</p>
<p><img src="/2021/01/02/KVM/6.png" alt></p>
</li>
<li><p>具体设置<br>在安装前可以具体设置kvm的各个参数。</p>
</li>
</ol>
<p><img src="/2021/01/02/KVM/7.png" alt></p>
]]></content>
      <categories>
        <category>虚拟化</category>
      </categories>
      <tags>
        <tag>KVM</tag>
      </tags>
  </entry>
  <entry>
    <title>信仰</title>
    <url>/2020/12/29/%E4%BF%A1%E4%BB%B0/</url>
    <content><![CDATA[<p>在这个怀疑的时代，我们依然需要信仰。</p>
<p>无论中国怎样，请记得：</p>
<p>你所站立的地方，就是你的中国；</p>
<p>你怎么样，中国便怎么样；</p>
<p>你是什么，中国便是什么；</p>
<p>你有光明，中国便不再黑暗。</p>
<p>——摘自原北京日报评论部主任卢新宁《2012年北京大学中文系毕业典礼上的讲话》</p>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>信仰</tag>
      </tags>
  </entry>
  <entry>
    <title>幸福</title>
    <url>/2020/09/11/%E5%B9%B8%E7%A6%8F/</url>
    <content><![CDATA[<p>”幸福“就是猫吃鱼，狗啃骨头，猪睡觉。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>幸福</tag>
      </tags>
  </entry>
  <entry>
    <title>我的2020</title>
    <url>/2020/12/31/%E6%88%91%E7%9A%842020/</url>
    <content><![CDATA[<p>2020，一场突如其来的疫情，让它注定成为不平凡的一年。</p>
<p>曾听闻，人这一生中有7次改变自己命运的机会，第一次是15岁，第二次是25岁，依此直到75岁。恰巧，今年我25岁。</p>
<p>这一年，经历了许多。</p>
<p>日复一日繁杂的工作让我不断思考我的人生路线。可是，陷入泥潭是难以自拔的。好在积蓄的能量终究会爆发，在无人预料，甚至我自己也毫无准备的情况下，我辞职了。</p>
<p>毫无顾虑的睡上了几天，远在广东的两个大学同学邀我游玩。于是人生中第一次坐飞机，第一次踏上了祖国的南方大地。</p>
<p>很快，3人租了辆车，开启了海岛之旅。于是我第一次走在真正的沙滩上，第一次见到真正的大海，吹着海风，吃着海鲜大餐，享受着无语伦比的惬意与快乐。</p>
<p>也认识了很多朋友，他们是一群积极向上的年轻人，没有大城市的勾心斗角，只有淳朴的热情。可惜我是一个无比慢热的人，甚至没来得及跟他们交换微信，在一次晚餐后匆匆离别，或许就是永别了。</p>
<p>返回南京，开始找工作，我自信最迟半个月肯定能找到心仪的工作。然而，事实狠狠打了我的脸，眼看一个月了，有几份工作，却都不是我想要的。慢慢地，我的耐心被消磨殆尽，也疲于奔波，在看清形势后，勉强找了一份稍满意的，准备一边做着一边找机会。</p>
<p>可惜，命运总是会跟你开各种各样的玩笑。一次PM找我谈话，我以为是工作上的事，事实也确实是，不过内容是，我因为某种不可抗力被辞退了，而此时离我进入公司才3周。先是震惊，不过几分钟后我就冷静了下来，因为我已经决定了我接下来的方向。</p>
<p>我好像突然醒悟了过来，我有了新的目标和方向。虽然可能有点晚，不过相比眼下一眼望到底的人生，似乎一切都还来得及，那就从头开始努力吧！</p>
<p>时间很快，2020还有几小时就要成为过去式了，而我的人生才刚刚开始，过往虽有遗憾，但我不后悔。</p>
<p>别了，2020。你好，2021！</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>2020</tag>
      </tags>
  </entry>
  <entry>
    <title>孤独</title>
    <url>/2020/06/21/%E5%AD%A4%E7%8B%AC/</url>
    <content><![CDATA[<p>我周围人声鼎沸，<br>他们讨论我不喜欢的话题，<br>我只好微笑，目光深远，<br>于是孤独从四面八方涌来，将我吞噬。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>孤独</tag>
      </tags>
  </entry>
  <entry>
    <title>青年</title>
    <url>/2021/01/04/%E9%9D%92%E5%B9%B4/</url>
    <content><![CDATA[<p>从一封匿名信里看见一句话，是“数麻石片”(原注江苏方言)，大约是没有本领便不必提倡改革，不如去数石片的好的意思。因此又记起了本志通信栏内所载四川方言的“洗煤炭”。想来别省方言中，相类的话还多；守着这专劝人自暴自弃的格言的人，也怕并不少。 </p>
<p>凡中国人说一句话，做一件事，倘与传来的积习有若干抵触，须一个斤斗便告成功，才有立足的处所；而且被恭维得烙铁一般热。否则免不了标新立异的罪名，不许说话；或者竟成了大逆不道，为天地所不容。这一种人，从前本可以夷到九族，连累邻居；现在却不过是几封匿名信罢了。但意志略略薄弱的人便不免因此萎缩，不知不觉的也入了“数麻石片”党。 </p>
<p>所以现在的中国，社会上毫无改革，学术上没有发明，美术上也没有创作；至于多人继续的研究，前仆后继的探险，那更不必提了。国人的事业，大抵是专谋时式的成功的经营，以及对于一切的冷笑。 </p>
<p>但冷笑的人，虽然反对改革，却又未必有保守的能力：即如文字一面，白话固然看不上眼，古文也不甚提得起笔。照他的学说，本该去“数麻石片”了；他却又不然，只是莫名其妙的冷笑。 </p>
<p>中国的人，大抵在如此空气里成功，在如此空气里萎缩腐败，以至老死。 </p>
<p>我想，人猿同源的学说，大约可以毫无疑义了。但我不懂，何以从前的古猴子，不都努力变人，却到现在还留着子孙，变把戏给人看。还是那时竟没有一匹想站起来学说人话呢?还是虽然有了几匹，却终被猴子社会攻击他标新立异，都咬死了；所以终于不能进化呢? </p>
<p>尼采式的超人，虽然太觉渺茫，但就世界观有人种的事实看来，却可以确信将来总有尤为高尚尤近圆满的人类出现。到那时候，类人猿上面，怕要添出“类猿人”这一个名词。 </p>
<p>所以我时常害怕，愿中国青年都摆脱冷气，只是向上走，不必听自暴自弃者流的话。能做事的做事，能发声的发声。有一分热，发一分光，就令萤火一般，也可以在黑暗里发一点光，不必等候炬火。 </p>
<p>此后如竟没有炬火：我便是唯一的光。倘若有了炬火，出了太阳，我们自然心悦诚服的消失。不但毫无不平，而且还要随喜赞美这炬火或太阳；因为他照了人类，连我都在内。 </p>
<p>我又愿中国青年都只是向上走，不必理会这冷笑和暗箭。尼采说：“真的，人是一个浊流。应该是海了，能容这浊流使他干净。 </p>
<p>“咄，我教你们超人：这便是海，在他这里，能容下你们的大侮蔑。”(《札拉图如是说》的《序言》第三节)<br>　　<br>纵令不过一洼浅水，也可以学学大海；横坚都是水，可以相通。几粒石子，任他们暗地里掷来；几滴秽水，任他们从背后泼来就是了。 </p>
<p>这还算不到“大侮蔑”——因为大侮蔑也须有胆力。</p>
<p>——鲁迅《热风·随感录四十一》</p>
]]></content>
      <categories>
        <category>读书</category>
      </categories>
      <tags>
        <tag>鲁迅</tag>
        <tag>青年</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下修改mysql数据库密码的几种方法</title>
    <url>/2021/01/05/Linux%E4%B8%8B%E4%BF%AE%E6%94%B9mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%86%E7%A0%81%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="未设置密码，可以通过mysql直接登录数据库"><a href="#未设置密码，可以通过mysql直接登录数据库" class="headerlink" title="未设置密码，可以通过mysql直接登录数据库"></a>未设置密码，可以通过mysql直接登录数据库</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mysql&gt; use mysql;</span><br><span class="line">mysql&gt; update user set password=password(<span class="string">"111111"</span>) where user=<span class="string">'root'</span>;</span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">mysql&gt; exit;</span><br></pre></td></tr></table></figure>
<h2 id="若已知密码，需要修改密码"><a href="#若已知密码，需要修改密码" class="headerlink" title="若已知密码，需要修改密码"></a>若已知密码，需要修改密码</h2><p>除了上述方法，也可以在mysql系统外，使用mysqladmin。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mysqladmin -u root -p password <span class="string">"111111"</span></span><br><span class="line">Enter password: 【输入原来的密码】</span><br></pre></td></tr></table></figure>
<h2 id="若忘记数据库密码，需要修改密码"><a href="#若忘记数据库密码，需要修改密码" class="headerlink" title="若忘记数据库密码，需要修改密码"></a>若忘记数据库密码，需要修改密码</h2><p>1、先停止数据库服务，修改/etc/my.cnf文件，在[mysqld]末尾添加skip-grant-tables；</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">skip-grant-tables</span><br></pre></td></tr></table></figure>
<p>2、重新启动数据库，可以通过mysql直接登录数据库；<br>3、修改密码完成后，删除skip-grant-tables。</p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>redhat7.6配置163yum源</title>
    <url>/2021/01/05/redhat7-6%E9%85%8D%E7%BD%AE163yum%E6%BA%90/</url>
    <content><![CDATA[<h2 id="确认版本"><a href="#确认版本" class="headerlink" title="确认版本"></a>确认版本</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[root@promote ~]<span class="comment"># cat /etc/redhat-release</span></span><br><span class="line">Red Hat Enterprise Linux Server release <span class="number">7.6</span> (Maipo)</span><br></pre></td></tr></table></figure>
<h2 id="卸载本地yum"><a href="#卸载本地yum" class="headerlink" title="卸载本地yum"></a>卸载本地yum</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rpm -qa|grep yum　　<span class="comment">#查看本地yum</span></span><br><span class="line">rpm -qa|grep yum|xargs rpm -e --nodeps　　<span class="comment">#卸载本地yum，不检查依赖性，卸载yum程序</span></span><br><span class="line">rpm -qa|grep yum    <span class="comment">#再次查看是否正确卸载</span></span><br></pre></td></tr></table></figure>
<h2 id="下载yum相关程序"><a href="#下载yum相关程序" class="headerlink" title="下载yum相关程序"></a>下载yum相关程序</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">wget http://mirrors<span class="number">.163</span>.com/centos/<span class="number">7</span>/os/x86_64/Packages/python-urlgrabber<span class="number">-3.10</span><span class="number">-10.</span>el7.noarch.rpm</span><br><span class="line">wget http://mirrors<span class="number">.163</span>.com/centos/<span class="number">7</span>/os/x86_64/Packages/rpm<span class="number">-4.11</span><span class="number">.3</span><span class="number">-45.</span>el7.x86_64.rpm</span><br><span class="line">wget http://mirrors<span class="number">.163</span>.com/centos/<span class="number">7</span>/os/x86_64/Packages/yum<span class="number">-3.4</span><span class="number">.3</span><span class="number">-168.</span>el7.centos.noarch.rpm</span><br><span class="line">wget http://mirrors<span class="number">.163</span>.com/centos/<span class="number">7</span>/os/x86_64/Packages/yum-metadata-parser<span class="number">-1.1</span><span class="number">.4</span><span class="number">-10.</span>el7.x86_64.rpm</span><br><span class="line">wget http://mirrors<span class="number">.163</span>.com/centos/<span class="number">7</span>/os/x86_64/Packages/yum-plugin-fastestmirror<span class="number">-1.1</span><span class="number">.31</span><span class="number">-54.</span>el7_8.noarch.rpm</span><br><span class="line">wget http://mirrors<span class="number">.163</span>.com/centos/<span class="number">7</span>/os/x86_64/Packages/yum-utils<span class="number">-1.1</span><span class="number">.31</span><span class="number">-54.</span>el7_8.noarch.rpm</span><br></pre></td></tr></table></figure>
<h2 id="安装yum程序"><a href="#安装yum程序" class="headerlink" title="安装yum程序"></a>安装yum程序</h2><p>若提示依赖检测失败，执行以下命令强制安装。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rpm -ivh * --force --nodeps <span class="comment">#--force 强制安装，--nodeps 不检查依赖</span></span><br></pre></td></tr></table></figure>

<h2 id="修改repo文件"><a href="#修改repo文件" class="headerlink" title="修改repo文件"></a>修改repo文件</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cd /etc/yum.repos.d/　　<span class="comment">#进入到yum配置文件目录</span></span><br><span class="line">mkdir repo_backup   <span class="comment">#创建yum备份目录</span></span><br><span class="line">mv *.repo repo_backup   <span class="comment">#备份</span></span><br><span class="line">wget http://mirrors<span class="number">.163</span>.com/.help/CentOS7-Base<span class="number">-163.</span>repo　　<span class="comment">#下载CentOS配置文件</span></span><br></pre></td></tr></table></figure>
<p>修改CentOS7-Base-163.repo文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">vi CentOS7-Base<span class="number">-163.</span>repo</span><br><span class="line">:%s/$releasever/<span class="number">7</span>/ge</span><br></pre></td></tr></table></figure>
<h2 id="清除并更新yum缓存"><a href="#清除并更新yum缓存" class="headerlink" title="清除并更新yum缓存"></a>清除并更新yum缓存</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">yum clean all&amp;yum makecache</span><br><span class="line">yum update</span><br><span class="line">yum repolist <span class="comment">#验证结果</span></span><br></pre></td></tr></table></figure>
<h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><p>当发现仍无需要的软件时，CentOS还有一个源叫做EPEL(Extra Packages for Enterprise)，可尝试安装epel yum源</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">yum install -y epel-release</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>redhat</category>
      </categories>
      <tags>
        <tag>redhat7.6</tag>
        <tag>redhat</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下通过Python的pymysql模块向mysql数据库持续插入图片数据</title>
    <url>/2021/01/05/Linux%E4%B8%8B%E9%80%9A%E8%BF%87Python%E7%9A%84pymysql%E6%A8%A1%E5%9D%97%E5%90%91mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8C%81%E7%BB%AD%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>安装pymysql模块</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install pymysql</span><br></pre></td></tr></table></figure>
<h2 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#encoding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment">#图片路径（根据实际情况修改）示例如下：</span></span><br><span class="line">picUrl = <span class="string">"/test/index.jpg"</span></span><br><span class="line"><span class="comment">#连接的数据库服务器主机名（根据实际情况修改）示例如下：</span></span><br><span class="line"><span class="comment">#conhost="127.0.0.1"</span></span><br><span class="line">conhost=<span class="string">"localhost"</span></span><br><span class="line"><span class="comment">#连接的数据库端口号（根据实际情况修改）示例如下：</span></span><br><span class="line">conport=<span class="number">3306</span></span><br><span class="line"><span class="comment">#连接的数据库的用户名（根据实际情况修改）示例如下：</span></span><br><span class="line">conuser=<span class="string">"root"</span></span><br><span class="line"><span class="comment">#连接的数据库密码（根据实际情况修改）示例如下：</span></span><br><span class="line">conpasswd=<span class="string">"111111"</span></span><br><span class="line"><span class="comment">#连接的数据库名（根据实际情况修改）示例如下：</span></span><br><span class="line">condb=<span class="string">"test"</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlobDataTestor</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment">#连接数据库</span></span><br><span class="line">        self.conn = pymysql.connect(host=conhost,port=conport, user=conuser,passwd=conpasswd,db=condb)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.conn.close()</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">closedb</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.conn.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment">#创建表</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setup</span><span class="params">(self)</span>:</span></span><br><span class="line">        cursor = self.conn.cursor()</span><br><span class="line">        cursor.execute(<span class="string">"""  </span></span><br><span class="line"><span class="string">            CREATE TABLE IF NOT EXISTS `Dem_Picture` (  </span></span><br><span class="line"><span class="string">            `ID` int(11) NOT NULL auto_increment,</span></span><br><span class="line"><span class="string">            `time` timestamp  ,</span></span><br><span class="line"><span class="string">            `PicData` mediumblob,</span></span><br><span class="line"><span class="string">            `RandomNum` varchar(20),</span></span><br><span class="line"><span class="string">            PRIMARY KEY (`ID`)  </span></span><br><span class="line"><span class="string">            ) ENGINE=MyISAM DEFAULT CHARSET=utf8 AUTO_INCREMENT=1 ;  </span></span><br><span class="line"><span class="string">            """</span>)</span><br><span class="line">	</span><br><span class="line">    <span class="comment">#删除表</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">teardown</span><span class="params">(self)</span>:</span></span><br><span class="line">        cursor = self.conn.cursor()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            cursor.execute(<span class="string">"Drop Table Dem_Picture"</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">            <span class="comment"># self.conn.commit()</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">testRWBlobData</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># 读取源图片数据</span></span><br><span class="line">        f = open(picUrl, <span class="string">"rb"</span>)</span><br><span class="line">        b = f.read()</span><br><span class="line">        f.close()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 生成随机数</span></span><br><span class="line">        s = <span class="string">''</span>.join(random.choice(string.ascii_uppercase + string.digits) <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将数据写入表</span></span><br><span class="line">        cursor = self.conn.cursor()</span><br><span class="line">        cursor.execute(<span class="string">"INSERT INTO Dem_Picture (time,PicData,RandomNum) VALUES (current_timestamp,%s,%s)"</span>,((pymysql.Binary(b)),s))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line"></span><br><span class="line">    test = BlobDataTestor()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment">#创建表</span></span><br><span class="line">        test.setup()</span><br><span class="line">        <span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">            test.testRWBlobData()</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"insert success"</span></span><br><span class="line">            <span class="comment">#time.sleep(1)	#根据需要设置插入时间间隔</span></span><br><span class="line">        <span class="comment">#删除表</span></span><br><span class="line">        <span class="comment">#test.teardown()</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        test.closedb()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
        <tag>python</tag>
        <tag>pymysql</tag>
      </tags>
  </entry>
  <entry>
    <title>排序算法（C）</title>
    <url>/2021/01/06/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%EF%BC%88C%EF%BC%89/</url>
    <content><![CDATA[<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>冒泡排序（Bubble Sort）：它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序（如从大到小、首字母从A到Z）错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。 </p>
<h3 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line">void bubble_sort(int [],int);</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int i;</span><br><span class="line">	int arr[]=&#123;<span class="number">22</span>,<span class="number">34</span>,<span class="number">3</span>,<span class="number">32</span>,<span class="number">82</span>,<span class="number">55</span>,<span class="number">89</span>,<span class="number">50</span>,<span class="number">37</span>,<span class="number">5</span>,<span class="number">64</span>,<span class="number">35</span>,<span class="number">9</span>,<span class="number">70</span>&#125;;</span><br><span class="line">    int len=(int)sizeof(arr)/sizeof(*arr);</span><br><span class="line">    bubble_sort(arr,len);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">        printf(<span class="string">"%d "</span>,arr[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void bubble_sort(int arr[],int len)</span><br><span class="line">&#123;</span><br><span class="line">    int i,j,temp;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len<span class="number">-1</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;len<span class="number">-1</span>-i;j++)</span><br><span class="line">            <span class="keyword">if</span>(arr[j]&gt;arr[j+<span class="number">1</span>])</span><br><span class="line">			&#123;</span><br><span class="line">                temp=arr[j];</span><br><span class="line">                arr[j]=arr[j+<span class="number">1</span>];</span><br><span class="line">                arr[j+<span class="number">1</span>]=temp;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="运行结果："><a href="#运行结果：" class="headerlink" title="运行结果："></a>运行结果：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span> <span class="number">5</span> <span class="number">9</span> <span class="number">22</span> <span class="number">32</span> <span class="number">34</span> <span class="number">35</span> <span class="number">37</span> <span class="number">50</span> <span class="number">55</span> <span class="number">64</span> <span class="number">70</span> <span class="number">82</span> <span class="number">89</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>选择排序（Selection Sort）：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</p>
<h3 id="实例：-1"><a href="#实例：-1" class="headerlink" title="实例："></a>实例：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line">void selection_sort(int [],int);</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int i;</span><br><span class="line">	int arr[]=&#123;<span class="number">22</span>,<span class="number">34</span>,<span class="number">3</span>,<span class="number">32</span>,<span class="number">82</span>,<span class="number">55</span>,<span class="number">89</span>,<span class="number">50</span>,<span class="number">37</span>,<span class="number">5</span>,<span class="number">64</span>,<span class="number">35</span>,<span class="number">9</span>,<span class="number">70</span>&#125;;</span><br><span class="line">    int len=(int)sizeof(arr)/sizeof(*arr);</span><br><span class="line">    selection_sort(arr,len);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">        printf(<span class="string">"%d "</span>,arr[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void selection_sort(int a[],int len) </span><br><span class="line">&#123;</span><br><span class="line">    int i,j,temp;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len<span class="number">-1</span>;i++) </span><br><span class="line">    &#123;</span><br><span class="line">        int min=i;                  // 记录最小值，第一个元素默认最小</span><br><span class="line">        <span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;len;j++)		// 访问未排序的元素</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j]&lt;a[min])			// 找到目前最小值</span><br><span class="line">                min=j;				// 记录最小值</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(min!=i)</span><br><span class="line">        &#123;</span><br><span class="line">            temp=a[min];			// 交换两个变量</span><br><span class="line">            a[min]=a[i];</span><br><span class="line">            a[i]=temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="运行结果：-1"><a href="#运行结果：-1" class="headerlink" title="运行结果："></a>运行结果：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span> <span class="number">5</span> <span class="number">9</span> <span class="number">22</span> <span class="number">32</span> <span class="number">34</span> <span class="number">35</span> <span class="number">37</span> <span class="number">50</span> <span class="number">55</span> <span class="number">64</span> <span class="number">70</span> <span class="number">82</span> <span class="number">89</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>插入排序（英语：Insertion Sort）：通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用in-place排序，因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</p>
<h3 id="实例：-2"><a href="#实例：-2" class="headerlink" title="实例："></a>实例：</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line">void insertion_sort(int [],int);</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int i;</span><br><span class="line">	int arr[]=&#123;<span class="number">22</span>,<span class="number">34</span>,<span class="number">3</span>,<span class="number">32</span>,<span class="number">82</span>,<span class="number">55</span>,<span class="number">89</span>,<span class="number">50</span>,<span class="number">37</span>,<span class="number">5</span>,<span class="number">64</span>,<span class="number">35</span>,<span class="number">9</span>,<span class="number">70</span>&#125;;</span><br><span class="line">    int len=(int)sizeof(arr)/sizeof(*arr);</span><br><span class="line">    insertion_sort(arr,len);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">        printf(<span class="string">"%d "</span>,arr[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void insertion_sort(int arr[],int len)</span><br><span class="line">&#123;</span><br><span class="line">    int i,j,temp;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;len;i++)</span><br><span class="line">	&#123;</span><br><span class="line">        temp=arr[i];</span><br><span class="line">        <span class="keyword">for</span>(j=i;j&gt;<span class="number">0</span>&amp;&amp;arr[j<span class="number">-1</span>]&gt;temp;j--)</span><br><span class="line">                arr[j]=arr[j<span class="number">-1</span>];</span><br><span class="line">        arr[j]=temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="运行结果：-2"><a href="#运行结果：-2" class="headerlink" title="运行结果："></a>运行结果：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3 5 9 22 32 34 35 37 50 55 64 70 82 89</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><p>希尔排序（Shell Sort）：也称递减增量排序算法，是插入排序的一种更高效的改进版本。希尔排序是非稳定排序算法。<br>希尔排序是基于插入排序的以下两点性质而提出改进方法的：</p>
<ul>
<li>插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率 </li>
<li>但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位</li>
</ul>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line">void shell_sort(int [],int);</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int i;</span><br><span class="line">	int arr[]=&#123;<span class="number">22</span>,<span class="number">34</span>,<span class="number">3</span>,<span class="number">32</span>,<span class="number">82</span>,<span class="number">55</span>,<span class="number">89</span>,<span class="number">50</span>,<span class="number">37</span>,<span class="number">5</span>,<span class="number">64</span>,<span class="number">35</span>,<span class="number">9</span>,<span class="number">70</span>&#125;;</span><br><span class="line">    int len=(int)sizeof(arr)/sizeof(*arr);</span><br><span class="line">    shell_sort(arr,len);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">        printf(<span class="string">"%d "</span>,arr[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void shell_sort(int arr[],int len)</span><br><span class="line">&#123;</span><br><span class="line">    int gap,i,j;</span><br><span class="line">    int temp;</span><br><span class="line">    <span class="keyword">for</span>(gap=len&gt;&gt;<span class="number">1</span>;gap&gt;<span class="number">0</span>;gap=gap&gt;&gt;<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span>(i=gap;i&lt;len;i++)</span><br><span class="line">		&#123;</span><br><span class="line">            temp=arr[i];</span><br><span class="line">            <span class="keyword">for</span>(j=i-gap;j&gt;=<span class="number">0</span>&amp;&amp;arr[j]&gt;temp;j-=gap)</span><br><span class="line">                arr[j+gap]=arr[j];</span><br><span class="line">            arr[j+gap]=temp;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span> <span class="number">5</span> <span class="number">9</span> <span class="number">22</span> <span class="number">32</span> <span class="number">34</span> <span class="number">35</span> <span class="number">37</span> <span class="number">50</span> <span class="number">55</span> <span class="number">64</span> <span class="number">70</span> <span class="number">82</span> <span class="number">89</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>归并排序（Merge Sort）：把数据分为两段，从两段中逐个选最小的元素移入新数据段的末尾。<br>可从上到下或从下到上进行。</p>
<h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><h4 id="迭代法"><a href="#迭代法" class="headerlink" title="迭代法"></a>迭代法</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></span><br><span class="line">int mini(int,int);</span><br><span class="line">void merge_sort(int [],int);</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int i;</span><br><span class="line">	int arr[]=&#123;<span class="number">22</span>,<span class="number">34</span>,<span class="number">3</span>,<span class="number">32</span>,<span class="number">82</span>,<span class="number">55</span>,<span class="number">89</span>,<span class="number">50</span>,<span class="number">37</span>,<span class="number">5</span>,<span class="number">64</span>,<span class="number">35</span>,<span class="number">9</span>,<span class="number">70</span>&#125;;</span><br><span class="line">    int len=(int)sizeof(arr)/sizeof(*arr);</span><br><span class="line">    merge_sort(arr,len);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">        printf(<span class="string">"%d "</span>,arr[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int mini(int x,int y) </span><br><span class="line">&#123;</span><br><span class="line">    return x&lt;y?x:y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void merge_sort(int arr[],int len)</span><br><span class="line">&#123;</span><br><span class="line">    int *a=arr;</span><br><span class="line">    int *b=(int*)malloc(len*sizeof(int));</span><br><span class="line">	int *temp,seg,start;</span><br><span class="line">    <span class="keyword">for</span>(seg=<span class="number">1</span>;seg&lt;len;seg+=seg)</span><br><span class="line">	&#123;</span><br><span class="line">        <span class="keyword">for</span>(start=<span class="number">0</span>;start&lt;len;start+=seg+seg)</span><br><span class="line">		&#123;</span><br><span class="line">            int low=start;</span><br><span class="line">			int mid=mini(start+seg,len);</span><br><span class="line">			int high=mini(start+seg+seg,len);</span><br><span class="line">            int k=low;</span><br><span class="line">            int start1=low;</span><br><span class="line">			int end1=mid;</span><br><span class="line">            int start2=mid;</span><br><span class="line">			int end2=high;</span><br><span class="line">            <span class="keyword">while</span>(start1&lt;end1&amp;&amp;start2&lt;end2)</span><br><span class="line">                b[k++]=a[start1]&lt;a[start2]?a[start1++]:a[start2++];</span><br><span class="line">            <span class="keyword">while</span>(start1&lt;end1)</span><br><span class="line">                b[k++]=a[start1++];</span><br><span class="line">            <span class="keyword">while</span>(start2&lt;end2)</span><br><span class="line">                b[k++]=a[start2++];</span><br><span class="line">        &#125;</span><br><span class="line">        temp=a;</span><br><span class="line">        a=b;</span><br><span class="line">        b=temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a!=arr)</span><br><span class="line">	&#123;</span><br><span class="line">        int i;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">            b[i]=a[i];</span><br><span class="line">        b=a;</span><br><span class="line">    &#125;</span><br><span class="line">    free(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="递归法"><a href="#递归法" class="headerlink" title="递归法"></a>递归法</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></span><br><span class="line"><span class="comment">#define N 14</span></span><br><span class="line">void merge_sort_recursive(int [],int [],int,int);</span><br><span class="line">void merge_sort(int [],const int);</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int i;</span><br><span class="line">	int arr[]=&#123;<span class="number">22</span>,<span class="number">34</span>,<span class="number">3</span>,<span class="number">32</span>,<span class="number">82</span>,<span class="number">55</span>,<span class="number">89</span>,<span class="number">50</span>,<span class="number">37</span>,<span class="number">5</span>,<span class="number">64</span>,<span class="number">35</span>,<span class="number">9</span>,<span class="number">70</span>&#125;;</span><br><span class="line">    int len=(int)sizeof(arr)/sizeof(*arr);</span><br><span class="line">    merge_sort(arr,len);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">        printf(<span class="string">"%d "</span>,arr[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void merge_sort_recursive(int arr[],int reg[],int start,int end)</span><br><span class="line">&#123;</span><br><span class="line">	int k,len,mid,start1,start2,end1,end2;</span><br><span class="line">    <span class="keyword">if</span>(start&gt;=end)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    len=end-start;</span><br><span class="line">	mid=(len&gt;&gt;<span class="number">1</span>)+start;</span><br><span class="line">    start1=start;</span><br><span class="line">	end1=mid;</span><br><span class="line">    start2=mid+<span class="number">1</span>;</span><br><span class="line">	end2=end;</span><br><span class="line">    merge_sort_recursive(arr,reg,start1,end1);</span><br><span class="line">    merge_sort_recursive(arr,reg,start2,end2);</span><br><span class="line">    k=start;</span><br><span class="line">    <span class="keyword">while</span>(start1&lt;=end1&amp;&amp;start2&lt;=end2)</span><br><span class="line">        reg[k++]=arr[start1]&lt;arr[start2]?arr[start1++]:arr[start2++];</span><br><span class="line">    <span class="keyword">while</span>(start1&lt;=end1)</span><br><span class="line">        reg[k++]=arr[start1++];</span><br><span class="line">    <span class="keyword">while</span>(start2&lt;=end2)</span><br><span class="line">        reg[k++]=arr[start2++];</span><br><span class="line">    <span class="keyword">for</span>(k=start;k&lt;=end;k++)</span><br><span class="line">        arr[k]=reg[k];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void merge_sort(int arr[], const int len)</span><br><span class="line">&#123;</span><br><span class="line">    int reg[N];</span><br><span class="line">    merge_sort_recursive(arr,reg,<span class="number">0</span>,len<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span> <span class="number">5</span> <span class="number">9</span> <span class="number">22</span> <span class="number">32</span> <span class="number">34</span> <span class="number">35</span> <span class="number">37</span> <span class="number">50</span> <span class="number">55</span> <span class="number">64</span> <span class="number">70</span> <span class="number">82</span> <span class="number">89</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="备注：常用排序算法的时间复杂度和空间复杂度"><a href="#备注：常用排序算法的时间复杂度和空间复杂度" class="headerlink" title="备注：常用排序算法的时间复杂度和空间复杂度"></a>备注：常用排序算法的时间复杂度和空间复杂度</h2><img src="/2021/01/06/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%EF%BC%88C%EF%BC%89/总.png" style="zoom:50%;">

<p><img src="/2021/01/06/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%EF%BC%88C%EF%BC%89/%E6%80%BB1.png" alt></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>算法</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>C++实例-个人银行账户管理程序</title>
    <url>/2021/01/06/C-%E5%AE%9E%E4%BE%8B-%E4%B8%AA%E4%BA%BA%E9%93%B6%E8%A1%8C%E8%B4%A6%E6%88%B7%E7%AE%A1%E7%90%86%E7%A8%8B%E5%BA%8F/</url>
    <content><![CDATA[<h2 id="源程序"><a href="#源程序" class="headerlink" title="源程序"></a>源程序</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#include &lt;iostream&gt;</span></span><br><span class="line"><span class="comment">#include &lt;cmath&gt;</span></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">//储蓄账户类</span><br><span class="line">class SavingAccount&#123;		</span><br><span class="line">private:</span><br><span class="line">	int id;					//账号</span><br><span class="line">	double balance;			//余额</span><br><span class="line">	double rate;			//存款的年利率</span><br><span class="line">	int lastDate;			//上次变更余额的时期</span><br><span class="line">	double accumulation;	//余额按日累加之和</span><br><span class="line"></span><br><span class="line">	//记录一笔账，date为日期，amount为金额，desc为说明</span><br><span class="line">	void record(int date,double amount);</span><br><span class="line"></span><br><span class="line">	//获得到指定日期为止的存款金额按日累积值</span><br><span class="line">	double accumulate(int date) const&#123;</span><br><span class="line">		<span class="keyword">return</span> accumulation+balance*(date-lastDate);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">	//构造函数</span><br><span class="line">	SavingAccount(int date,int id,double rate);</span><br><span class="line">	int getId()&#123;<span class="keyword">return</span> id;&#125;</span><br><span class="line">	double getBalance()&#123;<span class="keyword">return</span> balance;&#125;</span><br><span class="line">	double getRate()&#123;<span class="keyword">return</span> rate;&#125;</span><br><span class="line">	void deposit(int date,double amount);		//存入现金</span><br><span class="line">	void withdraw(int date,double amount);		//取出现金</span><br><span class="line">	//结算利息，每年<span class="number">1</span>月<span class="number">1</span>日调用一次该函数</span><br><span class="line">	void settle(int date);</span><br><span class="line">	//显示账户信息</span><br><span class="line">	void show();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//SavingAccount类相关成员函数的实现</span><br><span class="line">SavingAccount::SavingAccount(int date,int id,double rate)</span><br><span class="line">	:id(id),balance(<span class="number">0</span>),rate(rate),lastDate(date),accumulation(<span class="number">0</span>)&#123;</span><br><span class="line">	cout&lt;&lt;date&lt;&lt;<span class="string">"\t#"</span>&lt;&lt;id&lt;&lt;<span class="string">" is created"</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void SavingAccount::record(int date,double amount)&#123;</span><br><span class="line">	accumulation=accumulate(date);</span><br><span class="line">	lastDate=date;</span><br><span class="line">	amount=floor(amount*<span class="number">100</span>+<span class="number">0.5</span>)/<span class="number">100</span>;			//保留小数点后两位</span><br><span class="line">	balance+=amount;</span><br><span class="line">	cout&lt;&lt;date&lt;&lt;<span class="string">"\t#"</span>&lt;&lt;id&lt;&lt;<span class="string">"\t"</span>&lt;&lt;amount&lt;&lt;<span class="string">"\t"</span>&lt;&lt;balance&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void SavingAccount::deposit(int date,double amount)&#123;</span><br><span class="line">	record(date,amount);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void SavingAccount::withdraw(int date,double amount)&#123;</span><br><span class="line">	<span class="keyword">if</span>(amount&gt;getBalance())</span><br><span class="line">		cout&lt;&lt;<span class="string">"Error:not enough money"</span>&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		record(date,-amount);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void SavingAccount::settle(int date)&#123;</span><br><span class="line">	double interest=accumulate(date)*rate/<span class="number">365</span>;	//计算年息</span><br><span class="line">	<span class="keyword">if</span>(interest!=<span class="number">0</span>)</span><br><span class="line">		record(date,interest);</span><br><span class="line">	accumulation=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void SavingAccount::show()&#123;</span><br><span class="line">	cout&lt;&lt;<span class="string">"#"</span>&lt;&lt;id&lt;&lt;<span class="string">"\tBalance:"</span>&lt;&lt;balance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	//建立几个账户</span><br><span class="line">	SavingAccount sa0(<span class="number">1</span>,<span class="number">21325302</span>,<span class="number">0.015</span>);</span><br><span class="line">	SavingAccount sa1(<span class="number">1</span>,<span class="number">58320212</span>,<span class="number">0.015</span>);</span><br><span class="line">	//几笔账目</span><br><span class="line">	sa0.deposit(<span class="number">5</span>,<span class="number">5000</span>);</span><br><span class="line">	sa1.deposit(<span class="number">25</span>,<span class="number">10000</span>);</span><br><span class="line">	sa0.deposit(<span class="number">45</span>,<span class="number">5500</span>);</span><br><span class="line">	sa1.withdraw(<span class="number">60</span>,<span class="number">4000</span>);</span><br><span class="line">	//开户后第<span class="number">90</span>天到了银行的计息日，结算所有账户的年息</span><br><span class="line">	sa0.settle(<span class="number">90</span>);</span><br><span class="line">	sa1.settle(<span class="number">90</span>);</span><br><span class="line">	//输出各个账户信息</span><br><span class="line">	sa0.show();</span><br><span class="line">	cout&lt;&lt;endl;</span><br><span class="line">	sa1.show();</span><br><span class="line">	cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>       <span class="comment">#21325302 is created</span></span><br><span class="line"><span class="number">1</span>       <span class="comment">#58320212 is created</span></span><br><span class="line"><span class="number">5</span>       <span class="comment">#21325302       5000    5000</span></span><br><span class="line"><span class="number">25</span>      <span class="comment">#58320212       10000   10000</span></span><br><span class="line"><span class="number">45</span>      <span class="comment">#21325302       5500    10500</span></span><br><span class="line"><span class="number">60</span>      <span class="comment">#58320212       -4000   6000</span></span><br><span class="line"><span class="number">90</span>      <span class="comment">#21325302       27.64   10527.6</span></span><br><span class="line"><span class="number">90</span>      <span class="comment">#58320212       21.78   6021.78</span></span><br><span class="line"><span class="comment">#21325302       Balance:10527.6</span></span><br><span class="line"><span class="comment">#58320212       Balance:6021.78</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
</search>
